<script>
    let divBtnRadicar = document.getElementById('divBtnRadicar');

    let fileFactura = document.getElementById('fileFactura');
    let contenedorFactura = document.getElementById('contenedorFactura');
    let spanFileFactura = document.getElementById('spanFileFactura');
    let fileContenedorFactura = document.getElementById('fileContenedorFactura');

    let fileAnexos = document.getElementById('fileAnexos');
    let contenedorAnexos = document.getElementById('contenedorAnexos');
    let spanFileAnexos = document.getElementById('spanFileAnexos');
    let fileContenedorAnexos = document.getElementById('fileContenedorAnexos');
    let fileContenedorSoporteRespuesta = document.getElementById('fileContenedorSoporteRespuesta');

    let sltCiudad = document.getElementById('sltCiudad');
    let txtFecha = document.getElementById('txtFecha');
    let txtEstablecimiento = document.getElementById('txtEstablecimiento');
    let txtPrimerNombre = document.getElementById('txtPrimerNombre');
    let txtSegundoNombre = document.getElementById('txtSegundoNombre');
    let txtPrimerApellido = document.getElementById('txtPrimerApellido');
    let txtSegundoApellido = document.getElementById('txtSegundoApellido');
    let sltTipoIdentificacion = document.getElementById('sltTipoIdentificacion');
    let txtNumeroIdentifiacion = document.getElementById('txtNumeroIdentifiacion');
    let txtDireccionEntrega = document.getElementById('txtDireccionEntrega');
    let sltCiudadRepresentante = document.getElementById('sltCiudadRepresentante');
    let txtTelefono = document.getElementById('txtTelefono');
    let txtFax = document.getElementById('txtFax');
    let divBtnAceptarRadicar=document.getElementById('divBtnAceptarRadicar');
    let txtCantidad = document.getElementById('txtCantidad');
    let sltEspecimes = document.getElementById('sltEspecimes');
    let txtLongitudMenor = document.getElementById('txtLongitudMenor');
    let txtLongitudMayor = document.getElementById('txtLongitudMayor');
    let txtFechaRepresentante = document.getElementById('txtFechaRepresentante');
    let sltTipoSolicitud =document.getElementById('sltTipoSolicitud');
    let ulCamposOblgatorios = document.getElementById('ulCamposOblgatorios');
    let sltDepartamentoRepresentante = document.getElementById('sltDepartamentoRepresentante');

    //modal elementos
    let divBtnSiRadicar = document.getElementById('divBtnSiRadicar');
    let divBtnsSiNoModal = document.getElementById('divBtnsSiNoModal');
    let divBtnAceptarModal = document.getElementById('divBtnAceptarModal');
    let mensajeConfirmacion = document.getElementById('mensajeConfirmacion');
    let divSpinner = document.getElementById('divSpinner');
    let divValidacion = document.getElementById('divValidacion');
    let divBtnAceptar = document.getElementById('divBtnAceptar');
    let divBtnSiSalir = document.getElementById('divBtnSiSalir');
    let btnNoModal = document.getElementById('btnNoModal');

    let ulMenu = document.getElementById('ulMenu');
    let divBtnSalirVer = document.getElementById('divBtnSalirVer');
    let tituloRadicarSolicitud = document.getElementById('tituloRadicarSolicitud');

    let divBtnBuscarCupo = document.getElementById('divBtnBuscarCupo');
    let divTxtCodigoFinalPieles = document.getElementById('divTxtCodigoFinalPieles');
    let divTxtCodigoInicialPieles = document.getElementById('divTxtCodigoInicialPieles');
    let contenedorSoporteRespuesta = document.getElementById('contenedorSoporteRespuesta');
    let divRespuesta = document.getElementById('divRespuesta');
    let divBtnEditarSolicitud = document.getElementById('divBtnEditarSolicitud');
    let divTxtRespuesta=document.getElementById('divTxtRespuesta');
    let divCarta=document.getElementById('divCarta');
    let navHistorialCupos=document.getElementById('navHistorialCupos');
    let navRadicadas=document.getElementById('navRadicadas');
    let navRequerimiento=document.getElementById('navRequerimiento');
    let navAprobados=document.getElementById('navAprobados');
    let navDesistimiento=document.getElementById('navDesistimiento');
    let navCarta=document.getElementById('navCarta');
    let navDesistido=document.getElementById('navDesistido');
    let divDocFactura=document.getElementById('divDocFactura');
    let divDocAnexos=document.getElementById('divDocAnexos');
    let divDocSoporte=document.getElementById('divDocSoporte');
    let txtEstado=document.getElementById('txtEstado');
    let txtFechaRadicadoDesistimiento=document.getElementById('txtFechaRadicadoDesistimiento');
    let contenedorDocSoporteDesistimiento=document.getElementById('contenedorDocSoporteDesistimiento');
    let txtObservacionesDesistimiento=document.getElementById('txtObservacionesDesistimiento');
    let divEstadisticas=document.getElementById('divEstadisticas');
    let divCuposSeleccionar=document.getElementById('divCuposSeleccionar');
    let divContenidoRadicar=document.getElementById('divContenidoRadicar');
    let chkNumeraciones=document.getElementById('chkNumeraciones');
    let textAlertaNumeraciones=document.getElementById('textAlertaNumeraciones');
    let divNumeraciones=document.getElementById('divNumeraciones');
    let divTablesCuposInv=document.getElementById('divTablesCuposInv');
    let divSeleccionarNumeros=document.getElementById('divSeleccionarNumeros');
    let initialNumber=document.getElementById('initialNumber');
    let finalNumber =document.getElementById('finalNumber');
    let initialNumberRep=document.getElementById('initialNumberRep');
    let finalNumberRep=document.getElementById('finalNumberRep');
    let txtRep=document.getElementById('txtRep');
    let divNumSelected =document.getElementById('divNumSelected');
    let btnGuardarPreseleccionados=document.getElementById('btnGuardarPreseleccionados');
    let btnValidarNumeraciones=document.getElementById('btnValidarNumeraciones');
    let btnGuardarPreseleccionadosRangos=document.getElementById('btnGuardarPreseleccionadosRangos');
    let divBuscarEspecie=document.getElementById('divBuscarEspecie');
    let divTipoActa=document.getElementById('divTipoActa');
    let divCortes=document.getElementById('divCortes');
    let tableSafeguard=document.getElementById('tableSafeguard');
    let tableSafeguardSelected =document.getElementById('tableSafeguardSelected');
    let divTableSelected =document.getElementById('divTableSelected');
    let divtableTipoActa =document.getElementById('divtableTipoActa');

    let facturaBase64 = '';
    let nombreFactura = '';
    let tipoAdjuntoFactura = '';
    let adjuntosAnexos = [];
    let adjuntosAnexosOriginal = [];
    let adjuntosAnexosNuevos = [];
    let adjuntosAnexosEliminar = [];
    let adjuntosRespuestaEliminar = [];
    let adjuntosRespuesta = [];
    let adjuntosRespuestaOriginal = [];
    let adjuntosRespuestaNuevos = [];
    let adjuntoCarta=[];
    let inc = 0;
    let idCupoSolicitud;
    let idSolicitud;
    let cuposDisponibles;
    let radicadas = false;
    let enRequerimiento = false;
    let aprobadas=false;
    let desistidas=false;
    let codigoEmpresa;
    let empresas=[];
    let codigoEmpresaBuscada;
    let inventarioEspecies;
    let cuposPorEspecie;
    let datosNumeraciones=[];
    let validarCiudad=true;
    let cupoResponse;
    let inventarioResponse;
    let preseleccionados=[];
    let preseleccionadosCopia=[];
    let initialNumeration=0;
    let finalNumeration=0;
    let initialNumerationRepoblation=0;
    let finalNumerationRepoblation=0;
    let contadorPreselected=0;
    let datosNumeracionesCupos=[];
    let datosNumeracionesInventario=[];
    let editarPreseleccionado=false;
    let especieBuscar;
    let origen;
    let cortes =[];
    let cortesGuardar = [];
    let cuttingId=0;
    let cortesCopia=[];
    let safeGuardNumbers=[];
    let safeGuardNumbersSave =[];
    let safeGuardNumbersCopy=[];

    $(document).ready(async function () {
        visualizarFondoProcesando();
        codigoEmpresaBuscada=@ViewBag.codigoEmpresa;
        nitEmpresa=@ViewBag.nitEmpresa;
        let url = '@Url.Action("ConsultDocumentsTypes", "NonTimberFloraCertificate")';
        let urlCiudad = '@Url.Action("ConsultCities", "TrayForNationalSealsExternUsers")';
        let urlCiudadesConIdDepartamento =  '@Url.Action("ConsultCitiesByDepartmentId", "TrayForNationalSealsExternUsers", new {departamentoId = 0})';
        traerCiudades(sltCiudad, urlCiudad);
        traerCiudades(sltCiudadRepresentante, urlCiudadesConIdDepartamento);
        await traerTiposEspecimenes();
        await TraerAutoridadEmite();
        let urlEmpresas = `@Url.Action("ConsultBussiness", "TrayForNationalSealsExternUsers")`;
        empresas= await GetBussiness(txtEstablecimiento, urlEmpresas);
        if (empresas.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        await tabHistorial();
        await traerEmpresaYRepresentanteLegal(codigoEmpresaBuscada);
        contenedorAnexos.innerHTML = '';
        contenedorFactura.innerHTML = '';
        ocultarFondoProcesando();

        ajustarColumnasTabla('TableCuposSeleccionar');
    });

    async function TraerAutoridadEmite() {
        let url = `@Url.Action("ConsultAuthority", "NonTimberFloraCertificate")`;
        autoridades = await Get(url);
        if (autoridades.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
    }

    function ocultarNavs(validar){
        ocultarElemento(navHistorialCupos, validar)
        ocultarElemento(navRadicadas, validar);
        ocultarElemento(navRequerimiento, validar);
        ocultarElemento(navAprobados, validar);
        ocultarElemento(navDesistimiento, validar);
        if(desistidas){
            ocultarElemento(navDesistido, !validar);
        }
        if(aprobadas){
            ocultarElemento(navCarta, !validar);
        }
    }

    //se trae los Tipos de Especimenes para pintarlos en select2
    async function traerTiposEspecimenes() {
        let url = `@Url.Action("ConsultEspecimensTypes", "RegistrarResolucion")`;
        especies = await Get(url);
        if (especies.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        confSelectScrollInfite("#sltEspecimes", especies);
    }

    async function traerEmpresaYRepresentanteLegal(codigoEmpresaBuscada) {
        let url = `@Url.Action("ConsultBussinesAndLegalRepresentant", "TrayForNationalSealsExternUsers")` + '?codigoEmpresa=' + codigoEmpresaBuscada;
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        codigoEmpresa=codigoEmpresaBuscada;
        $(sltCiudad).val(datos.ciudad).trigger('change');
        $(txtEstablecimiento).val(datos.codigoEmpresa);
        disabledControl(sltCiudad, true);
        disabledControl(txtEstablecimiento, true);
        
    }

    function tabHistorial(){
        limpiarRadicarSolicitud();
        cargarHistorialCupos();
    }

    function tabRadicar() {
        if(!desistidas){
            if(!aprobadas){
                const fecha = new Date();
                $(txtFecha).val(moment(fecha).format('yyyy-MM-DD'));
                limpiarRadicarSolicitud();
                ocultarElemento(divBtnRadicar, false);
            }
        }
    }

    async function tabRadicadas() {
        limpiarRadicarSolicitud();
        await cargarTablaRadicadas();
    }

    async function tabRequerimiento() {
        limpiarRadicarSolicitud();
        await cargarTablaRequerimientos();
    }

    async function tabAprobadas() {
        limpiarRadicarSolicitud();
        await cargarTablaAprobadas();
    }

    async function tabDesistimiento() {
        limpiarRadicarSolicitud();
        await cargarTablaDesistimiento();
    }

    async function cargarHistorialCupos(){
        await loadTablaCupos();
        await loadTablaInventario();
        await cargarTotales();
    }

    function cargarTotales(){
        divEstadisticas.innerHTML='';
        let especiesAgrupadas = [];
        if(cuposPorEspecie!=null && cuposPorEspecie!=undefined && cuposPorEspecie.length>0){
            cuposPorEspecie.forEach(el => {
                const found = especiesAgrupadas.findIndex(element => element.especie === el.codigoEspecie);
                if (found === -1) {
                    especiesAgrupadas.push({
                        "especie":el.codigoEspecie,
                        "totalCuposOtorgadosEspecie":el.cuposDisponibles,
                        "totalInventarioEspecie":0
                    });
                } else {
                    especiesAgrupadas[found].totalCuposOtorgadosEspecie += el.cuposDisponibles;
                }
            });
        }
        if(inventarioEspecies!=null && inventarioEspecies!=undefined && inventarioEspecies.length>0){
            inventarioEspecies.forEach(el => {
                const found = especiesAgrupadas.findIndex(element => parseInt(element.especie) === el.speciesCode);
                if (found != -1) {
                    especiesAgrupadas[found].totalInventarioEspecie += el.availableInventory;
                }else{
                    especiesAgrupadas.push({
                        "especie":el.speciesCode,
                        "totalCuposOtorgadosEspecie":0,
                        "totalInventarioEspecie":el.availableInventory
                    });
                }
            });
        }
        if(especiesAgrupadas!=null && especiesAgrupadas!=undefined && especiesAgrupadas.length>0){
            especiesAgrupadas = especiesAgrupadas.filter(p=>(parseInt(p.totalCuposOtorgadosEspecie)!=0) || (parseInt(p.totalInventarioEspecie)!=0));
            if(especiesAgrupadas.length>0){
                especiesAgrupadas.forEach(el=>{
                    var especieNombre;
                    especies.forEach(ele => {
                        if (ele.id == parseInt(el.especie)) {
                            especieNombre = ele.text;
                        }
                    });
                    divEstadisticas.innerHTML+=
                        `<div class="row div-totales col-4">
                            <label class="col-12 titulo-especie">${especieNombre}</label>
                            <p><span >${el.totalCuposOtorgadosEspecie}</span> cupos disponibles</p>
                            <p><span>${el.totalInventarioEspecie}</span> inventario disponibles</p>
                        </div>`;
                });
            }
        }
    }

    //cargar la tabal de cupos en modal control de cupos
    async function loadTablaCupos() {
        let url = `@Url.Action("ConsultQuotas", "RegistrarResolucion")` + `?nitBussines=${nitEmpresa}`;
        let r = await Get(url);
        if (r.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        cuposPorEspecie=r;
        var columns = [
            {
                "data": "codigoCupo",
                className: "d-none"
            },
            {
                "data": "numeroResolucion",
                className: "td-1"
            },

            {
                "data": "fechaResolucion",
                render: function (data) {
                    return moment(data).format('yyyy-MM-DD');
                }
            },
            {
                "data": "fechaRegistroResolucion",
                render: function (data) {
                    return moment(data).format('yyyy-MM-DD');
                }
            },
            {
                "data": "autoridadEmiteResolucion",
                render : function(data){
                    let autoridad;
                    autoridades.forEach(el=>{
                        if(parseInt(el.code) == parseInt(data)){
                            autoridad = el.name;
                        }
                    });
                    return autoridad
                }
            },
            {
                "data": "codigoEspecie",
                render: function (data) {
                    var especieNombre;
                    especies.forEach(el => {
                        if (el.id == data) {
                            especieNombre = el.text;
                        }
                    });
                    return especieNombre;
                }
            },
            {
                "data": "anioProduccion"
            },
            {
                "data": "cuposAprovechamientoComercializacion"
            },
            {
                "data": "cuotaRepoblacion"
            },
            {
                "data": "cuposTotal"
            },
            {
                "data": "cuposDisponibles"
            },
            {
                "data": "numeroInternoInicial"
            },
            {
                "data": "numeroInternoFinal"
            },
            {
                "data": "numeroInternoInicialCuotaRepoblacion"
            },
            {
                "data": "numeroInternoFinalCuotaRepoblacion"
            },
        ];

        DataTableGenerico('#TableCupos', columns, r, 10);
    }

    //cargar la tabal de inventario en modal control de cupos
    async function loadTablaInventario() {
        let url = `@Url.Action("GetInventory","SaleDocument")` + `?documentNumber=${nitEmpresa}`;
        let r = await Get(url);
        if (r.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        inventarioEspecies=r;
        var columns= [
            {
                "data": "code",
                className: "d-none"
            },
            {
                "data": "numberSaleCarte"
            },
            {
                "data": "reasonSocial"
            },
            {
                "data": "saleDate",
                render: function (data) {
                    if (data != null) {
                    return moment(data).format("DD-MM-yyyy");
                    }
                    return data;
                },
            },
            {
                "data": "availabilityInventory"
            },
            {
                "data": "speciesCode",
                render: function (data) {
                    var especieNombre;
                    especies.forEach(el => {
                        if (el.id == data) {
                            especieNombre = el.text;
                        }
                    });
                    return especieNombre;
                }
            },
            {
                "data": "year"
            },
            {
                "data": "availableInventory"
            }
        ];
        DataTableGenerico('#TableInventario', columns, r, 7);
    }

    function radicar() {
        if (validarCampos()) {
            limpiarModal();
            ocultarElemento(divValidacion, false);
            ocultarElemento(divBtnsSiNoModal, false);
            ocultarElemento(divBtnSiRadicar, false);
            mensajeConfirmacion.innerText = '¿Esta seguro de guardar la solicitud?';
            $("#modalConfirmaciones").modal('show');
        }
    }

    async function siRadicar() {
        visualizarFondoProcesando();
        limpiarModal();
        ocultarElemento(divSpinner, false);
        var request = await llenarDatosRadicar();
        let url;
        if (enRequerimiento) {
            url = '@Url.Action("EditRequest", "TrayForNationalSealsExternUsers")';
        } else {
            url = '@Url.Action("RegisterRequest", "TrayForNationalSealsExternUsers")';
        }
        let r = await Get(url, request);
        if (r.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        limpiarModal();
        if (enRequerimiento) {
            mensajeConfirmacion.innerText = 'Se ha editado con éxito la solicitud';
        } else {
            mensajeConfirmacion.innerText = 'Se ha creado con éxito la solicitud';
        }
        ocultarElemento(divBtnAceptarModal, false);
        ocultarElemento(divBtnAceptar, false);
        ocultarElemento(divValidacion, false);
        limpiarRadicarSolicitud();
        ocultarElemento(divBtnRadicar, false);
        if (enRequerimiento) {
            tabRequerimiento();
            loadTabs(4);
            ocultarFondoProcesando();
            return;
        }
        await tabRadicadas();
        ocultarFondoProcesando();
        loadTabs(3);
    }

    function llenarDatosRadicar() {
        if (enRequerimiento) {
            return {
                'codigoSolicitud':parseInt(idSolicitud),
                'fecha': $(txtFecha).val(),
                'direccionEntrega': $(txtDireccionEntrega).val(),
                'ciudadRepresentante': $(sltCiudadRepresentante).val(),
                'longitudMenor': $(txtLongitudMenor).val(),
                'longitudMayor': $(txtLongitudMayor).val(),
                'fechaRepresentante': $(txtFechaRepresentante).val(),
                'tipoSolicitud':$(sltTipoSolicitud).val(),
                'observaciones': $(txtObservaciones).val(),
                'respuesta': $(txtRespuesta).val(),
                'facturaAdjunto': {
                    'codigo': codigoAdjuntoFactura,
                    'adjuntoBase64': facturaBase64,
                    'nombreAdjunto': nombreFactura,
                    'tipoAdjunto': tipoAdjuntoFactura
                },
                'AnexosAdjuntos': adjuntosAnexosNuevos,
                'anexosAdjuntosEliminar': adjuntosAnexosEliminar,
                'adjuntosRespuesta': adjuntosRespuestaNuevos,
                'adjuntosRespuestaEliminar': adjuntosRespuestaEliminar
            }
        }
        if($(sltTipoSolicitud).val() == 10200 || $(sltTipoSolicitud).val() == 20206){
            return {
                'codigoEmpresa':codigoEmpresa,
                'fecha': $(txtFecha).val(),
                'direccionEntrega': $(txtDireccionEntrega).val(),
                'ciudadRepresentante': $(sltCiudadRepresentante).val(),
                'cantidad': $(txtCantidad).val(),
                'especimenes': $(sltEspecimes).val(),
                'longitudMenor': $(txtLongitudMenor).val(),
                'longitudMayor': $(txtLongitudMayor).val(),
                'fechaRepresentante': $(txtFechaRepresentante).val(),
                'tipoSolicitud':$(sltTipoSolicitud).val(),
                'observaciones': $(txtObservaciones).val(),
                'respuesta': $(txtRespuesta).val(),
                'facturaAdjunto': {
                    'adjuntoBase64': facturaBase64,
                    'nombreAdjunto': nombreFactura,
                    'tipoAdjunto': tipoAdjuntoFactura
                },
                'AnexosAdjuntos': adjuntosAnexos,
                'numeraciones': datosNumeraciones
            }
        
        }
        if($(sltTipoSolicitud).val() == 20207) {
            return {
                'codigoEmpresa':codigoEmpresa,
                'fecha': $(txtFecha).val(),
                'direccionEntrega': $(txtDireccionEntrega).val(),
                'ciudadRepresentante': $(sltCiudadRepresentante).val(),
                'cantidad': $(txtCantidad).val(),
                'especimenes': $(sltEspecimes).val(),
                'longitudMenor': $(txtLongitudMenor).val(),
                'longitudMayor': $(txtLongitudMayor).val(),
                'fechaRepresentante': $(txtFechaRepresentante).val(),
                'tipoSolicitud':$(sltTipoSolicitud).val(),
                'facturaAdjunto': {
                    'adjuntoBase64': facturaBase64,
                    'nombreAdjunto': nombreFactura,
                    'tipoAdjunto': tipoAdjuntoFactura
                },
                'AnexosAdjuntos': adjuntosAnexos,
                'safeGuardNumbers' : safeGuardNumbersSave,
                'cuttingSave' : cortesGuardar
            }
        
        }
        if($(sltTipoSolicitud).val() == 60240) {
            return {
                'codigoEmpresa':codigoEmpresa,
                'fecha': $(txtFecha).val(),
                'direccionEntrega': $(txtDireccionEntrega).val(),
                'ciudadRepresentante': $(sltCiudadRepresentante).val(),
                'cantidad': $(txtCantidad).val(),
                'especimenes': $(sltEspecimes).val(),
                'longitudMenor': $(txtLongitudMenor).val(),
                'longitudMayor': $(txtLongitudMayor).val(),
                'fechaRepresentante': $(txtFechaRepresentante).val(),
                'tipoSolicitud':$(sltTipoSolicitud).val(),
                'facturaAdjunto': {
                    'adjuntoBase64': facturaBase64,
                    'nombreAdjunto': nombreFactura,
                    'tipoAdjunto': tipoAdjuntoFactura
                },
                'AnexosAdjuntos': adjuntosAnexos
            }
        
        }
    }

    function aceptarRadicar() {
        if (enRequerimiento) {
            radicadas = false;
            enRequerimiento = false;
            aprobadas=false;
            desistidas=false;
            tabRequerimiento();
            loadTabs(4);
            $('#modalConfirmaciones').modal('hide');
            return;
        }
    }

    async function cargarTablaRadicadas() {
        let url = '@Url.Action("ConsultRegisteredRecuest", "TrayForNationalSealsExternUsers")' + '?codigoEmpresa=' + parseInt(codigoEmpresa);
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        let columns = [
            {
                data: "codigo",
                className: "d-none",
            },
            {
                data: "numeroRadicado",
            },
            {
                data: "solicitudPrecintoMarquilla",
            },
            {
                data: "nombreEntidadSolicitante"
            },
            {
                data: "fechaSolicitud",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                },
            },
            {
                data: "fechaRadicacion",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                },
            },
            {
                data: "estado",
            },
            {
                data: "codigo",
                render: function (data) {
                    return `<a type="button" class="text-primary btnVerRadicada">VER</a>
                    <div class="spinner-border spinner-border-sm text-primary d-none" role="status" id="spinner${data}"> <span class="sr-only">Loading...</span></div>`;
                },
            },
        ];
        DataTableGenerico('#tableRadicadas', columns, datos, 7);
        console.log(datos);
    }


    async function cargarTablaRequerimientos() {
        let url = '@Url.Action("ConsultRequirements", "TrayForNationalSealsExternUsers")' + '?codigoEmpresa=' + codigoEmpresa;
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        columns = [
            {
                data: "codigo",
                className: "d-none"
            },
            {
                data: "numeroRadicado"
            },
            {
                data: "solicitudPrecintoMarquilla"
            },
            {
                data: "nombreEntidadSolicitante"
            },
            {
                data: "fechaSolicitud",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "fechaRadicacion",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "estado"
            },
            {
                data: "observaciones"
            },
            {
                data: "codigo",
                render: function (data) {
                    return `<a type="button" class="text-primary btnEditarRequerimiento">EDITAR</a>
                    <div class="spinner-border spinner-border-sm text-primary d-none" role="status" id="spinner${data}"> <span class="sr-only">Loading...</span></div>`;
                }
            }
        ];
        DataTableGenerico('#tableRequeriemiento', columns, datos, 8);
    }

    async function cargarTablaAprobadas() {
        let url = '@Url.Action("ConsultApproved", "TrayForNationalSealsExternUsers")' + '?codigoEmpresa=' + codigoEmpresa;
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        columns = [
            {
                data: "codigo",
                className: "d-none"
            },
            {
                data: "numeroRadicado"
            },
            {
                data: "solicitudPrecintoMarquilla"
            },
            {
                data: "nombreEntidadSolicitante"
            },
            {
                data: "fechaSolicitud",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "fechaRadicacion",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "numeroRadicadoSalida"
            },
            {
                data: "fechaRadicadoSalida",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "estado"
            },
            {
                data: "codigo",
                render: function (data) {
                    return `<a type="button" class="text-primary btnVerAprobadas">VER</a>
                    <div class="spinner-border spinner-border-sm text-primary d-none" role="status" id="spinner${data}"> <span class="sr-only">Loading...</span></div>`;
                }
            }
        ];
        DataTableGenerico('#tableAprobadas', columns, datos, 7);
    }

    async function cargarTablaDesistimiento() {
        let url = '@Url.Action("ConsultDesisted", "TrayForNationalSealsExternUsers")' + '?codigoEmpresa=' + codigoEmpresa;
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        columns = [
            {
                data: "codigo",
                className: "d-none"
            },
            {
                data: "numeroRadicado"
            },
            {
                data: "solicitudPrecintoMarquilla"
            },
            {
                data: "nombreEntidadSolicitante"
            },
            {
                data: "fechaSolicitud",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "fechaRadicacion",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                data: "estado"
            },
            {
                data: "codigo",
                render: function (data) {
                    return `<a type="button" class="text-primary btnVerDesistimiento">VER</a>
                    <div class="spinner-border spinner-border-sm text-primary d-none" role="status" id="spinner${data}"> <span class="sr-only">Loading...</span></div>`;
                }
            }
        ];
        DataTableGenerico('#tableDesistimiento', columns, datos, 7);
    }

    async function BuscarCupo() {
        ocultarElemento(spinnerButton, false);
        var v=validar(sltEspecimes, validacionsltEspecimes);
        if(v){
            datosNumeraciones=[];
            ocultarElemento(btnGuardarPreseleccionados, true);
            await cargarTablasCuposInventario();
            ocultarElemento(divBtnRadicar, true);
            ocultarElemento(divContenidoRadicar, true);
            ocultarElemento(divCuposSeleccionar, false);
        }
        ocultarElemento(spinnerButton, true);
        ajustarColumnasTabla('TableCuposSeleccionar');
        ajustarColumnasTabla('TableInventarioSeleccionar');
    }

    function volverBuscarCupo(){
        preseleccionados=[];
        preseleccionadosCopia=[];
        datosNumeracionesCupos=[];
        datosNumeracionesInventario=[];
        datosNumeraciones=[];
        ocultarElemento(divNumeraciones, true);
        ocultarElemento(divBtnRadicar, false);
        ocultarElemento(divContenidoRadicar, false);
        ocultarElemento(divCuposSeleccionar, true);
    }

    async function cargarInventario(esp){
        let url = `@Url.Action("GetInventory", "TrayForNationalSealsExternUsers")` + `?documentNumber=${nitEmpresa}&especie=${esp}`;
        inventarioResponse = await Get(url);
        if (inventarioResponse.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        var columns = [
            {
                "data":"code",
                className:"d-none"
            },
            {
                "data":"numberSaleCarte",
            },
            {
                "data": "speciesCode",
                className:"d-none"
            },
            {
                "data": "speciesCode",
                render: function (data) {
                    var especieNombre;
                    especies.forEach(el => {
                        if (el.id == data) {
                            especieNombre = el.text;
                        }
                    });
                    return especieNombre;
                }
            },
            {
                "data":"code",
                render: function (data) {
                    var inventarioValidar=datosNumeracionesInventario.find(p=>parseInt(p.codigo) == parseInt(data) && parseInt(p.origen)== 10182);
                    if(inventarioValidar!=undefined){
                        return `<a type="button" class="btnEditInventario">EDITAR</a>`
                    }
                    return `<a type="button" class="btnAddInventario">AGREGAR</a>`
                }
            }
        ];
        DataTableGenerico('#TableInventarioSeleccionar', columns, inventarioResponse, 4);
    }

    async function cargarCupos(esp){
        let url = `@Url.Action("GetQuotas", "TrayForNationalSealsExternUsers")` + `?documentNumber=${nitEmpresa}&especie=${esp}`;
        cupoResponse = await Get(url);
        if (cupoResponse.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        
        $TableCuposSeleccionar = $('#TableCuposSeleccionar').DataTable({
            searching: false,
            destroy: true,
            scrollX: true,
            lengthChange: true,
            lengthMenu: [5, 10, 20, 50, 100],
            paging: true,
            info: true,
            dom:
                "<'row'<'col-md-12'f><'col-md-12 text-end'<'d-flex align-items-center mt-1'<'col-md-10'l><'col-md-2'i>>>>" +
                "<'row'<'col-md-12'rt><'col-md-12 text-center'p>>",
            language: {
                lengthMenu: "Resultados pág. _MENU_",
                info: "_START_ al _TOTAL_ Resultados",
                search: "",
                searchPlaceholder: "Buscar",
                zeroRecords: "No se encontraron resultados",
                infoEmpty: "0 al 0 Resultados",
                paginate: {
                    previous: "Anterior",
                    next: "Siguiente",
                },
            },
            data: cupoResponse,
            columns : [
                {
                    "data":"code",
                    className:"d-none"
                },
                {
                    "data":"numberResolution",
                },
                {
                    "data": "speciesCode",
                    className:"d-none"
                },
                {
                    "data": "speciesCode",
                    render: function (data) {
                        var especieNombre;
                        especies.forEach(el => {
                            if (el.id == data) {
                                especieNombre = el.text;
                            }
                        });
                        return especieNombre;
                    }
                },
                {
                    "data":"code",
                    render: function (data) {
                        var cupoValidar=datosNumeracionesCupos.find(p=>parseInt(p.codigo) == parseInt(data) && parseInt(p.origen)== 10183);
                        if(cupoValidar!=undefined){
                            return `<a type="button" class="btnEdit">EDITAR</a>`
                        }
                        return `<a type="button" class="btnAdd">AGREGAR</a>`
                    }
                }
            ],
            columnDefs: [{
                targets: 4
            }]
        });

        ajustarColumnasTabla('TableCuposSeleccionar');
        
    }

    async function cargarTablasCuposInventario(){
        especieBuscar =$(sltEspecimes).val();
        await cargarCupos(especieBuscar);
        await cargarInventario(especieBuscar);
    }

    $('#TableCuposSeleccionar tbody').on('click', '.btnAdd', function () {
        cupo=true;
        inventario = false;
        editarPreseleccionado=false;
        origen=10183;
        SelectNumbers(this, cupoResponse);
    });

    $('#TableCuposSeleccionar tbody').on('click', '.btnEdit', function () {
        cupo=true;
        inventario = false;
        editarPreseleccionado=true;
        origen=10183;
        SelectNumbers(this, cupoResponse);
    });

    $('#TableInventarioSeleccionar tbody').on('click', '.btnAddInventario', function () {
        cupo=false;
        inventario = true;
        editarPreseleccionado=false;
        origen=10182;
        SelectNumbers(this, inventarioResponse);
    });

    $('#TableInventarioSeleccionar tbody').on('click', '.btnEditInventario', function () {
        cupo=false;
        inventario = true;
        editarPreseleccionado=true;
        origen=10182;
        SelectNumbers(this, inventarioResponse);
    });

    async function SelectNumbers(tabla, datos){
        code = $(tabla).parents("tr").find("td")[0].innerText;
        codigoEspecie = $(tabla).parents("tr").find("td")[2].innerText;
        if(editarPreseleccionado){
            if(cupo){
                validarEditarPeseleccionado(datosNumeracionesCupos);
                datosNumeracionesCupos= datosNumeracionesCupos.filter(el=>parseInt(el.codigo) != parseInt(code));
            }else{
                validarEditarPeseleccionado(datosNumeracionesInventario);
                datosNumeracionesInventario= datosNumeracionesInventario.filter(el=>parseInt(el.codigo) != parseInt(code));
            }
        }
        var registro=datos.find(p=>parseInt(p.code) == parseInt(code));
        initialNumeration=registro.initialNumeration;
        finalNumeration = registro.finalNumeration;
        initialNumber.innerText= initialNumeration;
        finalNumber.innerText=finalNumeration;
        initialNumerationRepoblation = 0;
        finalNumerationRepoblation =0;
        if(registro.initialNumerationRePoblation!=undefined && registro.finalNumerationRePoblation!=undefined && cupo){
            initialNumerationRepoblation = registro.initialNumerationRePoblation;
            finalNumerationRepoblation =registro.finalNumerationRePoblation;
            initialNumberRep.innerText=initialNumerationRepoblation;
            finalNumberRep.innerText=finalNumerationRepoblation;
            ocultarElemento(txtRep, false);
        }else{
            ocultarElemento(txtRep, true);
        }
        let data ={
            "code":code,
            "nitEmpresa":nitEmpresa,
            "cupo":cupo,
            "inventario" :inventario
        }
        let url = `@Url.Action("getNumbersRequest", "TrayForNationalSealsExternUsers")`;
        let numeros = await Get(url, data);
         if (numeros.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        cargarTablaNoDisponibles(numeros);
        var total=0;
        if(numeros!=null && numeros.length>0){
            numeros.forEach(el=>{
                total=total + (el.final - el.initial + 1);
            });
            if(initialNumerationRepoblation!=0 && finalNumerationRepoblation!=0){
                if(total == (finalNumeration- initialNumeration + 1) + ( finalNumerationRepoblation - initialNumerationRepoblation + 1)){
                    mostrarMensajeNoDisponibles();
                }else{
                    $(btnValidarNumeraciones).prop('disabled', false);
                    $(txtNumeroInicialSelected).prop('disabled', false);
                    $(txtNumerofinalSelected).prop('disabled', false);
                    ocultarElemento(btnGuardarPreseleccionadosRangos, false);
                }
            }else{
                if(total == (finalNumeration- initialNumeration + 1)){
                    mostrarMensajeNoDisponibles();
                }else{
                    $(btnValidarNumeraciones).prop('disabled', false);
                    $(txtNumeroInicialSelected).prop('disabled', false);
                    $(txtNumerofinalSelected).prop('disabled', false);
                    ocultarElemento(btnGuardarPreseleccionadosRangos, false);
                }
            }
        }
        ocultarElemento(divTablesCuposInv, true);
        ocultarElemento(divSeleccionarNumeros, false);
        ajustarColumnasTabla('TableCuposOcupados');
        
    }

    function mostrarMensajeNoDisponibles(){
        $(btnValidarNumeraciones).prop('disabled', true);
        $(txtNumeroInicialSelected).prop('disabled', true);
        $(txtNumerofinalSelected).prop('disabled', true);
        ocultarElemento(btnGuardarPreseleccionadosRangos, true);
        textAlertaNumeraciones.innerText=`Todas las numeraciones ya tienen solicitudes`;
        $('#modalAlertaNumeraciones').modal('show');
    }

    async function validarEditarPeseleccionado(datoNumeraciones){
        
        var preselec = datoNumeraciones.filter(el=>parseInt(el.codigo) == parseInt(code));
        preselec.forEach(el=>{
            preseleccionadosCopia.push({
                'codeTemporal' : el.codeTemporal,
                'initial' : el.initial,
                'final' : el.final,
                'cantidad': el.cantidad,
                'origen':el.origen
            });
            preseleccionados.push({
                'codeTemporal' : el.codeTemporal,
                'initial' : el.initial,
                'final' : el.final,
                'cantidad': el.cantidad,
                'origen':el.origen
            });
        });
        await cargarTablaSeleccionadas(preseleccionados);
        
    }

    function cargarTablaSeleccionadas(data){
        var columns = [
            {
                "data":"codeTemporal",
                className:"d-none"
            },  
            {
                "data":"initial"
            },                
            {
                "data":"final",
            },
            {
                "data":"cantidad",
            },
            {
                render: function(){
                    return "<a class='btnEliminarPreseleccion' type='Button'>ELIMINAR</a>"
                }
            }
        ];
        DataTableGenerico('#TableCuposSeleccionados', columns, data, 4);
        
        ocultarElemento(divNumSelected, false);
    }

    $('#TableCuposSeleccionados tbody').on('click', '.btnEliminarPreseleccion', async function () {
        var id = parseInt($(this).parents("tr").find("td")[0].innerText);
        preseleccionados = preseleccionados.filter(p=>parseInt(p.codeTemporal) != id);
        await cargarTablaSeleccionadas(preseleccionados)
    });

    async function ValidarNumeraciones(){
        ocultarElemento(spinnerButton, false);
        var validacionPreselect=[];
        var validacionPreselectedCupos=[];
        var validacionPreselectedInventario=[];
        if(parseInt($(txtNumeroInicialSelected).val()) > parseInt($(txtNumerofinalSelected).val())){
            textAlertaNumeraciones.innerText=`El numero inicial no puede ser mayor al final`;
            $('#modalAlertaNumeraciones').modal('show');
            $(txtNumeroInicialSelected).val('');
            $(txtNumerofinalSelected).val('');
            ocultarElemento(spinnerButton, true);
            return;
        }
        if((initialNumeration>parseInt($(txtNumeroInicialSelected).val())) 
        || (parseInt($(txtNumeroInicialSelected).val()) > finalNumeration) 
        || (parseInt($(txtNumerofinalSelected).val())<initialNumeration) 
        || (parseInt($(txtNumerofinalSelected).val())>finalNumeration)
        ){
            if((initialNumerationRepoblation>parseInt($(txtNumeroInicialSelected).val()) 
            || parseInt($(txtNumeroInicialSelected).val()) > finalNumerationRepoblation 
            || parseInt($(txtNumerofinalSelected).val())<initialNumerationRepoblation 
            || parseInt($(txtNumerofinalSelected).val())>finalNumerationRepoblation) ){
                if(initialNumerationRepoblation!=0 && finalNumerationRepoblation !=0){
                    textAlertaNumeraciones.innerText=`las numeraciones deben estar por dentro del rango: ${initialNumeration} - ${finalNumeration} o ${initialNumerationRepoblation} - ${finalNumerationRepoblation}`;
                }else{
                    textAlertaNumeraciones.innerText=`las numeraciones deben estar por dentro del rango: ${initialNumeration} - ${finalNumeration}`;
                }
                $('#modalAlertaNumeraciones').modal('show');
                $(txtNumeroInicialSelected).val('');
                $(txtNumerofinalSelected).val('');
                ocultarElemento(spinnerButton, true);
                return;
            }
        }
        if(preseleccionados.length>0){
            validacionPreselect = preseleccionados.find(p=>(parseInt($(txtNumeroInicialSelected).val()) >= p.initial && parseInt($(txtNumeroInicialSelected).val()) <= p.final) || (parseInt($(txtNumerofinalSelected).val()) >= p.initial && parseInt($(txtNumerofinalSelected).val())<= p.final));
        }
        if(datosNumeracionesCupos!=undefined && datosNumeracionesCupos.length>0){
            validacionPreselectedCupos = datosNumeracionesCupos.find(p=>(parseInt($(txtNumeroInicialSelected).val()) >= p.initial && parseInt($(txtNumeroInicialSelected).val()) <= p.final) || (parseInt($(txtNumerofinalSelected).val()) >= p.initial && parseInt($(txtNumerofinalSelected).val())<= p.final));
            if(validacionPreselectedCupos !=undefined && validacionPreselectedCupos.length==0 ){
                textAlertaNumeraciones.innerText=`Hay numeraciones que ya se han pre-seleccionado en cupos`;
                $('#modalAlertaNumeraciones').modal('show');
                return;
            }
        }
        if(datosNumeracionesInventario != undefined && datosNumeracionesInventario.length>0){
            validacionPreselectedInventario = datosNumeracionesInventario.find(p=>(parseInt($(txtNumeroInicialSelected).val()) >= p.initial && parseInt($(txtNumeroInicialSelected).val()) <= p.final) || (parseInt($(txtNumerofinalSelected).val()) >= p.initial && parseInt($(txtNumerofinalSelected).val())<= p.final));
            if(validacionPreselectedInventario != undefined && validacionPreselectedInventario.length>0){
                textAlertaNumeraciones.innerText=`Hay numeraciones que ya se han pre-seleccionado en inventario`;
                $('#modalAlertaNumeraciones').modal('show');
                return;
            }
        }
        
        if( validacionPreselect == undefined || validacionPreselect.length==0){    
            let validacion =true;

            var num = {
                "codeCompany":nitEmpresa,
                "numeros":{
                    "initial":$(txtNumeroInicialSelected).val(),
                    "final":$(txtNumerofinalSelected).val()
                },
                "origen":origen
            }
            let url = `@Url.Action("ValidateNumbers", "TrayForNationalSealsExternUsers")`;
            validacion = await Get(url, num);
            if (validacion.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
            }

            if(validacion){
                contadorPreselected++;
                preseleccionados.push({
                    'codeTemporal' : contadorPreselected,
                    'initial' : parseInt($(txtNumeroInicialSelected).val()),
                    'final' : parseInt($(txtNumerofinalSelected).val()),
                    'cantidad': parseInt($(txtNumerofinalSelected).val()) - parseInt($(txtNumeroInicialSelected).val()) + 1,
                    'origen':origen
                });

                await cargarTablaSeleccionadas(preseleccionados);
            }else{
                textAlertaNumeraciones.innerText=`Hay numeraciones no disponibles`;
                $('#modalAlertaNumeraciones').modal('show');
            }
        }else{
            textAlertaNumeraciones.innerText=`Hay numeraciones ya pre-seleccionadas`;
            $('#modalAlertaNumeraciones').modal('show');
        }
        $(txtNumeroInicialSelected).val('');
        $(txtNumerofinalSelected).val('');
        ocultarElemento(spinnerButton, true);
        ajustarColumnasTabla('TableCuposSeleccionados');
    }

    async function guardarPreseleccionados(validar){
    
        if((preseleccionados!=undefined && preseleccionados.length>0) || (preseleccionadosCopia!=undefined && preseleccionadosCopia.length>0)){
            
            if(datosNumeracionesCupos==undefined){
                datosNumeracionesCupos=[];
            }
            if(datosNumeracionesInventario==undefined){
                datosNumeracionesInventario=[];
            }
            if(!validar && (editarPreseleccionado)){
                guardarPreseleccionadosAListas(preseleccionadosCopia)
            }else{
                guardarPreseleccionadosAListas(preseleccionados)
            }
            if(cupo){
                await cargarCupos(especieBuscar);
            }else{
                await cargarInventario(especieBuscar);
            }
            if((datosNumeracionesCupos==undefined || datosNumeracionesCupos==null ||datosNumeracionesCupos.length==0) && (datosNumeracionesInventario==undefined || datosNumeracionesInventario==null || datosNumeracionesInventario.length==0)){
                ocultarElemento(btnGuardarPreseleccionados, true);
            }else{
                ocultarElemento(btnGuardarPreseleccionados, false);
            }
            volverResoluciones(false);
        }
    }

    function guardarPreseleccionadosAListas(preselected){

        preselected.forEach(el=>{
            if(inventario){
                datosNumeracionesInventario.push({
                    'codeTemporal':el.codeTemporal,
                    'codigo': code,
                    'initial' : el.initial,
                    'final' : el.final,
                    'cantidad' : el.cantidad,
                    'origen':el.origen
                })
            }else{
                datosNumeracionesCupos.push({
                    'codeTemporal':el.codeTemporal,
                    'codigo': code,
                    'initial' : el.initial,
                    'final' : el.final,
                    'cantidad' : el.cantidad,
                    'origen':el.origen
                });
            }
        });
    }

    function cargarTablaNoDisponibles(data){
        var columns = [
            {
                "data":"initial"
            },                
            {
                "data":"final",
            }
        ];
        DataTableGenerico('#TableCuposOcupados', columns, data, 1);
    }

    function volverResoluciones(validar){
        if(validar && (editarPreseleccionado)){
            guardarPreseleccionados(false);
            editarPreseleccionado=false;
            return;
        }
        if((datosNumeracionesCupos==undefined || datosNumeracionesCupos==null ||datosNumeracionesCupos.length==0) && (datosNumeracionesInventario==undefined || datosNumeracionesInventario==null || datosNumeracionesInventario.length==0)){
            ocultarElemento(btnGuardarPreseleccionados, true)
        }else{
            ocultarElemento(btnGuardarPreseleccionados, false)
        }
        ocultarElemento(divSeleccionarNumeros, true);
        ocultarElemento(divTablesCuposInv, false);
        ocultarElemento(divNumSelected, true);
        preseleccionados=[];
        preseleccionadosCopia=[];
        ajustarColumnasTabla('TableCuposSeleccionar');
        ajustarColumnasTabla('TableInventarioSeleccionar');
    }

    async function GuardarDatsNumeraciones(){
        if(datosNumeracionesCupos!=null && datosNumeracionesCupos.length>0){
            datosNumeracionesCupos.forEach(el=>{
                datosNumeraciones.push({
                    'codigo': el.codigo,
                    'inicial' : el.initial,
                    'final' : el.final,
                    'cantidad' : el.cantidad,
                    'origen':el.origen
                });
            });
        }

        if(datosNumeracionesInventario !=null && datosNumeracionesInventario.length>0){
            datosNumeracionesInventario.forEach(el=>{
                datosNumeraciones.push({
                    'codigo': el.codigo,
                    'inicial' : el.initial,
                    'final' : el.final,
                    'cantidad' : el.cantidad,
                    'origen':el.origen
                });
            })
        }

        if(datosNumeraciones.length!=0){
            var cantidad = 0
            datosNumeraciones.forEach(el=>{
                cantidad=cantidad+el.cantidad;
            });
            await cargarNumeraciones(datosNumeraciones);
            $(txtCantidad).val(cantidad);
            ocultarElemento(divNumeraciones, false);
            ocultarElemento(divBtnRadicar, false);
            ocultarElemento(divContenidoRadicar, false);
            ocultarElemento(divCuposSeleccionar, true);
            ajustarColumnasTabla('tableNumeraciones');
            return
        }
        textAlertaNumeraciones.innerText='Debe seleccionar una numeración';
        $('#modalAlertaTablas').modal('show');
    }

    function cargarNumeraciones(datosNumeraciones){
        columns=[
            {
                    render: function () {
                    var especieNombre;
                    especies.forEach(el => {
                        if (el.id == parseInt($(sltEspecimes).val())) {
                            especieNombre = el.text;
                        }
                    });
                    return especieNombre;
                }
            },
            {
                "data": "inicial"
            },
            {
                "data": "final"
            },
        ];
        DataTableGenericoSinBuscador('#tableNumeraciones', columns, datosNumeraciones, 2);
        ajustarColumnasTabla('tableNumeraciones');
    }

    async function EditarSolicitud() {
        if (validarCampos()) {
            limpiarModal();
            ocultarElemento(divValidacion, false);
            ocultarElemento(divBtnsSiNoModal, false);
            ocultarElemento(divBtnSiRadicar, false);
            mensajeConfirmacion.innerText = '¿Esta seguro de editar la solicitud?';
            $("#modalConfirmaciones").modal('show');
        }
    }

    function limpiarRadicarSolicitud() {
        ocultarElemento(divBtnEditarSolicitud, true);
        ocultarElemento(divBtnRadicar, true);
        ocultarElemento(fileContenedorFactura, false);
        ocultarElemento(divRespuesta, true);
        ocultarElemento(divDocSoporte, false);
        ocultarElemento(divDocAnexos, false);
        ocultarElemento(divDocFactura, false);
        ocultarElemento(divTxtRespuesta, false);
        ocultarElemento(divNumeraciones, true);
        ocultarElemento(divTableSelected, true);
        ocultarElemento(divTipoActa, true);
        ocultarElemento(divtableTipoActa, false);
        ocultarElemento(divBuscarEspecie, false);
        ocultarElemento(divBtnBuscarCupo, false);
        contenedorAnexos.innerHTML = '';
        contenedorFactura.innerHTML = '';
        contenedorSoporteRespuesta.innerHTML = '';
        contenedorDocSoporteDesistimiento.innerHTML='';
        $(txtEstado).val('');
        $(txtFechaRadicadoDesistimiento).val('');
        $(txtObservacionesDesistimiento).val('');
        reiniciarAlertasControles();
        reiniciarSoloLeerControles();
        contadorPreselected=0;
        $(txtDireccionEntrega).val('');
        $(sltCiudadRepresentante).val('0').trigger('change');
        $(sltDepartamentoRepresentante).val('0').trigger('change');
        $(txtCantidad).val('');
        $(sltEspecimes).val('0').trigger('change');
        $(txtLongitudMenor).val('');
        $(txtLongitudMayor).val('');
        $(txtFechaRepresentante).val('');
        $(sltTipoSolicitud).val('0');
        $(txtObservaciones).val('');
        $(txtRespuesta).val('');
        preseleccionados=[];
        preseleccionadosCopia=[];
        datosNumeracionesCupos=[];
        datosNumeracionesInventario=[];
        editarPreseleccionado=false;
        inventario=false;
        cupo=false;
        datosNumeraciones=[];
        facturaBase64 = '';
        nombreFactura = '';
        tipoAdjuntoFactura = '';
        cuposDisponibles = 0;
        idCupoSolicitud = 0;
        adjuntosAnexos = [];
        adjuntosAnexosEliminar = [];
        adjuntosRespuestaNuevos=[];
        adjuntoCarta=[];
        adjuntosAnexosNuevos=[];
        adjuntosRespuestaEliminar = [];
        adjuntosRespuesta = [];
        safeGuardNumbers=[];
        safeGuardNumbersCopy=[];
        safeGuardNumbersSave=[];
        cortes=[];
        cortesCopia=[];
        cortesGuardar=[];
        tituloRadicarSolicitud.innerHTML = 'Crear solicitud';
    }

    function validarCampos() {
        
        let validartxtDireccionEntrega = validar(txtDireccionEntrega, validaciontxtDireccionEntrega);
        let validartxtLongitudMenor = validar(txtLongitudMenor, validaciontxtLongitudMenor);
        let validartxtLongitudMayor = validar(txtLongitudMayor, validaciontxtLongitudMayor);
        let validartxtCantidad = validar(txtCantidad, validaciontxtCantidad);
        let validartxtFechaRepresentante = validar(txtFechaRepresentante, validaciontxtFechaRepresentante);
        let validarsltDepartamentoRepresentante = validar(sltDepartamentoRepresentante, validacionsltDepartamentoRepresentante, false, $('#divSltDepartamentoRepresentante .select2-selection'));
        let validarsltCiudadRepresentante = validar(sltCiudadRepresentante, validacionsltCiudadRepresentante, false, $('#divSltCiudadRepresentante .select2-selection'));
        let validarsltTipoSolicitud =validar(sltTipoSolicitud, validacionsltTipoSolicitud);

        let validarsltCiudad = validar(sltCiudad, validacionsltCiudad, false, $('#divSltCiudad .select2-selection'));
        let validartxtEstablecimiento = validar(txtEstablecimiento, validaciontxtEstablecimiento);
        let validartxtPrimerNombre = validar(txtPrimerNombre, validaciontxtPrimerNombre);
        let validartxtPrimerApellido = validar(txtPrimerApellido, validaciontxtPrimerApellido);
        let validarsltTipoIdentificacion = validar(sltTipoIdentificacion, validacionsltTipoIdentificacion);
        let validartxtNumeroIdentifiacion = validar(txtNumeroIdentifiacion, validaciontxtNumeroIdentifiacion);
        let validarFileFactura = validar(null, spanFileFactura, false, contenedorFactura);      
        let validartxtTelefono = validar(txtTelefono, validaciontxtTelefono);
        
        if($(sltTipoSolicitud).val() == 10200 || $(sltTipoSolicitud).val() == 20206){

            let validarsltEspecimes = validar(sltEspecimes, validacionsltEspecimes);
            
            if(validarsltTipoSolicitud && validarsltEspecimes && validartxtDireccionEntrega &&  validarsltDepartamentoRepresentante && validarsltCiudadRepresentante && validarsltCiudadRepresentante 
            && validartxtLongitudMenor && validartxtLongitudMayor && validartxtFechaRepresentante && validartxtCantidad && validarFileFactura){
                return true;    
            }
            var camposObligatorios = [];
            if (!validartxtDireccionEntrega) {
                camposObligatorios.push('Dirección de entrega');
            }
            if (!validarsltCiudadRepresentante) {
                camposObligatorios.push('Ciudad');
            }
            if (!validartxtCantidad) {
                camposObligatorios.push('Cantidad');
            }
            if (!validarsltEspecimes) {
                camposObligatorios.push('Especies o subespecies');
            }
            if (!validartxtLongitudMenor) {
                camposObligatorios.push('Longitud menor');
            }
            if (!validartxtLongitudMayor) {
                camposObligatorios.push('Longitud mayor');
            }
            if (!validartxtFechaRepresentante) {
                camposObligatorios.push('Fecha consignación precintos - marquillas');
            }
            if(!validarsltTipoSolicitud){
                camposObligatorios.push('Tipo de solicitud');
            }
            if (!validarsltDepartamentoRepresentante) {
                camposObligatorios.push('Departamento');
            }
            if (!validarFileFactura) {
            camposObligatorios.push('Factura');
            }

            alertasValidacionesControles('#modalAlerta', ulCamposOblgatorios, camposObligatorios);
            return false;
            
        } 
        
        if($(sltTipoSolicitud).val() == 20207){  
            if(validarsltTipoSolicitud && validartxtDireccionEntrega &&  validarsltDepartamentoRepresentante && validarsltCiudadRepresentante && validarsltCiudadRepresentante
            && validartxtLongitudMenor && validartxtLongitudMayor && validartxtFechaRepresentante && validartxtCantidad && validarFileFactura){
                return true;    
            }
            var camposObligatorios = [];
            if (!validartxtDireccionEntrega) {
                camposObligatorios.push('Dirección de entrega');
            }
            if (!validarsltCiudadRepresentante) {
                camposObligatorios.push('Ciudad');
            }
            if (!validartxtCantidad) {
                camposObligatorios.push('Cantidad');
            }
            if (!validartxtLongitudMenor) {
                camposObligatorios.push('Longitud menor');
            }
            if (!validartxtLongitudMayor) {
                camposObligatorios.push('Longitud mayor');
            }
            if (!validartxtFechaRepresentante) {
                camposObligatorios.push('Fecha consignación precintos - marquillas');
            }
            if(!validarsltTipoSolicitud){
                camposObligatorios.push('Tipo de solicitud');
            }
            if (!validarsltDepartamentoRepresentante) {
                camposObligatorios.push('Departamento');
            }
            if (!validarFileFactura) {
            camposObligatorios.push('Factura');
            }

            alertasValidacionesControles('#modalAlerta', ulCamposOblgatorios, camposObligatorios);
            return false;    
        
        }

        if($(sltTipoSolicitud).val() == 60240){  
            if(validartxtDireccionEntrega && validarsltDepartamentoRepresentante && validarsltCiudadRepresentante && validarsltCiudadRepresentante && validartxtCantidad 
            && validartxtLongitudMenor && validartxtLongitudMayor && validartxtFechaRepresentante && validarFileFactura){
                return true;    
            }
            var camposObligatorios = [];
            if (!validartxtDireccionEntrega) {
                camposObligatorios.push('Dirección de entrega');
            }
            if (!validarsltCiudadRepresentante) {
                camposObligatorios.push('Ciudad');
            }
            if (!validartxtCantidad) {
                camposObligatorios.push('Cantidad');
            }
            if (!validartxtLongitudMenor) {
                camposObligatorios.push('Longitud menor');
            }
            if (!validartxtLongitudMayor) {
                camposObligatorios.push('Longitud mayor');
            }
            if (!validartxtFechaRepresentante) {
                camposObligatorios.push('Fecha consignación precintos - marquillas');
            }
            if(!validarsltTipoSolicitud){
                camposObligatorios.push('Tipo de solicitud');
            }
            if (!validarsltDepartamentoRepresentante) {
                camposObligatorios.push('Departamento');
            }
            if (!validarFileFactura) {
            camposObligatorios.push('Factura');
            }

            alertasValidacionesControles('#modalAlerta', ulCamposOblgatorios, camposObligatorios);
            return false;    
        
        }


        if (enRequerimiento) {

            let validartxtRespuesta = validar(txtRespuesta, validaciontxtRespuesta);
            if (validarsltCiudad && validartxtEstablecimiento && validartxtPrimerNombre && validartxtPrimerApellido
                && validarsltTipoIdentificacion && validartxtNumeroIdentifiacion && validartxtDireccionEntrega
                && validarsltCiudadRepresentante && validartxtTelefono && validartxtCantidad && validarsltEspecimes && validartxtLongitudMenor && validartxtLongitudMayor 
                && validartxtFechaRepresentante && validarsltTipoSolicitud && validarFileFactura && validartxtRespuesta) {
                return true;
            }
            var camposObligatorios = [];
            let validarsltEspecimes = validar(sltEspecimes, validacionsltEspecimes);

            if (!validartxtDireccionEntrega) {
                camposObligatorios.push('Dirección de entrega');
            }
            if (!validarsltCiudadRepresentante) {
                camposObligatorios.push('Ciudad');
            }
            if (!validartxtCantidad) {
                camposObligatorios.push('Cantidad');
            }
            if (!validarsltEspecimes) {
                camposObligatorios.push('Especies o subespecies');
            }
            if (!validartxtLongitudMenor) {
                camposObligatorios.push('Longitud menor');
            }
            if (!validartxtLongitudMayor) {
                camposObligatorios.push('Longitud mayor');
            }
            if (!validartxtFechaRepresentante) {
                camposObligatorios.push('Fecha consignación precintos - marquillas');
            }
            if(!validarsltTipoSolicitud){
                camposObligatorios.push('Tipo de solicitud');
            }
            if (!validarFileFactura) {
                camposObligatorios.push('Factura');
            }
            if (!validartxtRespuesta) {
                camposObligatorios.push('Respuesta');
            }
            if (!validarsltDepartamentoRepresentante) {
                camposObligatorios.push('Departamento');
            }

            alertasValidacionesControles('#modalAlerta', ulCamposOblgatorios, camposObligatorios);
            return false;
        }

    

        if (validarsltCiudad && validartxtEstablecimiento && validartxtPrimerNombre && validartxtPrimerApellido
            && validarsltTipoIdentificacion && validartxtNumeroIdentifiacion && validartxtDireccionEntrega
            && validarsltCiudadRepresentante && validartxtTelefono && validartxtCantidad && validarsltEspecimes && validartxtLongitudMenor && validartxtLongitudMayor 
            && validartxtFechaRepresentante && sltTipoSolicitud && validarFileFactura) {
            return true;
        }

        let validarsltEspecimes = validar(sltEspecimes, validacionsltEspecimes);
        var camposObligatorios = [];
        if (!validartxtDireccionEntrega) {
            camposObligatorios.push('Dirección de entrega');
        }
        if (!validarsltCiudadRepresentante) {
            camposObligatorios.push('Ciudad');
        }
        if (!validartxtCantidad) {
            camposObligatorios.push('Cantidad');
        }
        if (!validarsltEspecimes) {
            camposObligatorios.push('Especies o subespecies');
        }
        if (!validartxtLongitudMenor) {
            camposObligatorios.push('Longitud menor');
        }
        if (!validartxtLongitudMayor) {
            camposObligatorios.push('Longitud mayor');
        }
        if (!validartxtFechaRepresentante) {
            camposObligatorios.push('Fecha consignación precintos - marquillas');
        }
        if(!validarsltTipoSolicitud){
            camposObligatorios.push('Tipo de solicitud');
        }
        if (!validarFileFactura) {
            camposObligatorios.push('Factura');
        }
        if (!validarsltDepartamentoRepresentante) {
            camposObligatorios.push('Departamento');
        }

        alertasValidacionesControles('#modalAlerta', ulCamposOblgatorios, camposObligatorios);
        return false;
    
        
    }

    function reiniciarAlertasControles() {
        reiniciarElementos($('#divSltCiudad .select2-selection'), validacionsltCiudad);
        reiniciarElementos($('#divSltDepartamentoRepresentante .select2-selection'), validacionsltDepartamentoRepresentante);
        reiniciarElementos(txtEstablecimiento, validaciontxtEstablecimiento);
        reiniciarElementos(txtPrimerNombre, validaciontxtPrimerNombre);
        reiniciarElementos(txtPrimerApellido, validaciontxtPrimerApellido);
        reiniciarElementos(txtSegundoApellido, validaciontxtSegundoApellido);
        reiniciarElementos(sltTipoIdentificacion, validacionsltTipoIdentificacion);
        reiniciarElementos(txtNumeroIdentifiacion, validaciontxtNumeroIdentifiacion);
        reiniciarElementos(txtDireccionEntrega, validaciontxtDireccionEntrega);
        reiniciarElementos($('#divSltCiudadRepresentante .select2-selection'), validacionsltCiudadRepresentante);
        reiniciarElementos(txtTelefono, validaciontxtTelefono);
        reiniciarElementos(txtCantidad, validaciontxtCantidad);
        reiniciarElementos(sltEspecimes, validacionsltEspecimes);
        reiniciarElementos(txtLongitudMenor, validaciontxtLongitudMenor);
        reiniciarElementos(txtLongitudMayor, validaciontxtLongitudMayor);
        reiniciarElementos(txtFechaRepresentante, validaciontxtFechaRepresentante);
        
        reiniciarElementos(sltTipoSolicitud, validacionsltTipoSolicitud);
        ocultarElemento(spanFileAnexos, true);
        ocultarElemento(spanFileFactura, true);

    }

    function limpiarModal() {
        ocultarElemento(divBtnSiRadicar, true);
        ocultarElemento(divBtnAceptarModal, true);
        ocultarElemento(divBtnsSiNoModal, true);
        ocultarElemento(divSpinner, true);
        ocultarElemento(divValidacion, true);
        ocultarElemento(divBtnAceptarRadicar, true);
        ocultarElemento(divBtnAceptar, true);
        ocultarElemento(divBtnSiSalir, true);
        if ($(btnNoModal).hasClass('btn btn-primary')) {
            $(btnNoModal).removeClass('btn btn-primary');
            $(btnNoModal).addClass('btn btn-secondary');
        }
    }

    function validar(elemento, span, val = false, elemento2 = null) {

        if (elemento == null && !val && elemento2 != null) {
            if (elemento2.innerHTML != '') {
                return true;
            }
            span.innerText = 'Campo obligatorio';
            ocultarElemento(span, false);
            return false;
        }

        //se validan elementos de input normales si estan llenos
        if (elemento != null) {
            if ($(elemento).val() == null || $(elemento).val() == '' || $(elemento).val() == '0' || $(elemento).val() == 0 || $(elemento).val().length == 0) {
                ocultarElemento(span, false);
                if (elemento2 != null) {
                    if (!elemento2.hasClass('required-validate')) {
                        elemento2.addClass('required-validate');
                        span.innerText = 'Campo obligatorio';
                    }
                    return false;
                }
                if (!$(elemento).hasClass('required-validate')) {
                    $(elemento).addClass('required-validate');
                    span.innerText = 'Campo obligatorio';
                }
                return false;
            }
        }
        return true;
    }

    async function siSalir() {

        if (radicadas) {
            await tabRadicadas();
            loadTabs(3);
            $('#modalConfirmaciones').modal('hide');
        }
        if (enRequerimiento) {
            await tabRequerimiento();
            loadTabs(4);
            $('#modalConfirmaciones').modal('hide');
        }
        if (aprobadas) {
            await tabAprobadas();
            loadTabs(5);
            $('#modalConfirmaciones').modal('hide');
        }
        if (desistidas) {
            await tabDesistimiento();
            loadTabs(6);
            $('#modalConfirmaciones').modal('hide');
        }
        ocultarNavs(false);
        radicadas = false;
        enRequerimiento = false;
        aprobadas=false;
        desistidas=false;
    }

    function salirVer() {
        limpiarModal();
        if ($(btnNoModal).hasClass('btn btn-secondary')) {
            $(btnNoModal).removeClass('btn btn-secondary');
            $(btnNoModal).addClass('btn btn-primary');
        }
        mensajeConfirmacion.innerText = '¿Esta seguro que desea salir?';
        ocultarElemento(divValidacion, false);
        ocultarElemento(divBtnsSiNoModal, false);
        ocultarElemento(divBtnSiSalir, false);
        $('#modalConfirmaciones').modal('show');
    }

    function soloLeerControles() {
        tituloRadicarSolicitud.innerHTML = 'Editar solicitud';
        if (!enRequerimiento) {
            readOnly(txtDireccionEntrega, true);
            readOnly(txtLongitudMenor, true);
            readOnly(txtLongitudMayor, true);
            readOnly(txtFechaRepresentante, true);
            disabledControl(sltTipoSolicitud, true);
            readOnly(txtRespuesta, true);
            ocultarElemento(fileContenedorSoporteRespuesta, true);
            ocultarElemento(fileContenedorAnexos, true);
            tituloRadicarSolicitud.innerHTML = 'Ver solicitud';
            $(".checkConsignacion").prop("disabled", true);
            disabledControl(sltCiudadRepresentante, true);
            disabledControl(sltDepartamentoRepresentante, true);
        }
        readOnly(txtCantidad, true);
        disabledControl(sltEspecimes, true);
        if($(divTxtCodigoFinalPieles).hasClass('col-md-10')){
            $(divTxtCodigoFinalPieles).removeClass('col-md-10');
            $(divTxtCodigoFinalPieles).addClass('col-md-12');
        }
        ocultarElemento(fileContenedorFactura, true);
        ocultarElemento(ulMenu, true);
        ocultarElemento(divBtnRegresar, true);
        ocultarElemento(divBtnSalirVer, false);
        ocultarElemento(divBtnBuscarCupo, true);
    }

    function reiniciarSoloLeerControles() {
        readOnly(txtDireccionEntrega, false);
        readOnly(txtLongitudMenor, false);
        readOnly(txtLongitudMayor, false);
        readOnly(txtFechaRepresentante, false);
        disabledControl(sltTipoSolicitud, false);
        readOnly(txtRespuesta, false);
        ocultarElemento(fileContenedorSoporteRespuesta, false);
        $(".checkConsignacion").prop("disabled", false);
        disabledControl(sltCiudadRepresentante, false);
        disabledControl(sltDepartamentoRepresentante, false);
        ocultarElemento(fileContenedorAnexos, false);
        ocultarElemento(fileContenedorFactura, false);
        ocultarElemento(ulMenu, false);
        ocultarElemento(divBtnRegresar, false);
        ocultarElemento(divBtnSalirVer, true);
        ocultarElemento(divBtnBuscarCupo, true);
        disabledControl(sltEspecimes, false);
        if($(divTxtCodigoFinalPieles).hasClass('col-md-12')){
            $(divTxtCodigoFinalPieles).removeClass('col-md-12');
            $(divTxtCodigoFinalPieles).addClass('col-md-10');
        }
    }

    async function llenarControlesSolicitudRadicada() {
        let url = '@Url.Action("ConsultOnePendientRegister", "TrayForNationalSealsExternUsers")' + '?codigoSolicitud=' + parseInt(idSolicitud);
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }

       
        let urlCiudades = '@Url.Action("ConsultCitiesByDepartmentId", "TrayForNationalSealsExternUsers")?departamentoId='+ datos.departamentoRepresentante;
        await traerCiudades(sltCiudadRepresentante, urlCiudades);

        $(txtFecha).val(moment(datos.fecha).format('yyyy-MM-DD'));
        $(txtDireccionEntrega).val(datos.direccionEntrega);
        validarCiudad=false;
        $(sltDepartamentoRepresentante).val(datos.departamentoRepresentante).trigger('change');
        $(sltCiudadRepresentante).val(datos.ciudadRepresentante).trigger('change');
        $(txtCantidad).val(parseInt(datos.cantidad));
        $(txtLongitudMenor).val(datos.longitudMenor);
        $(txtLongitudMayor).val(datos.longitudMayor);
        $(txtFechaRepresentante).val(moment(datos.fechaRepresentante).format('yyyy-MM-DD'));
        $(sltTipoSolicitud).val(datos.tipoSolicitud); 
        adjuntoHTML(contenedorFactura, datos.facturaAdjunto.adjuntoBase64, datos.facturaAdjunto.tipoAdjunto, datos.facturaAdjunto.nombreAdjunto, fileContenedorFactura, null, !enRequerimiento);
        codigoAdjuntoFactura = datos.facturaAdjunto.codigo;
        facturaBase64 = datos.facturaAdjunto.adjuntoBase64;
        tipoAdjuntoFactura = datos.facturaAdjunto.tipoAdjunto;
        nombreFactura = datos.facturaAdjunto.nombreAdjunto;
        adjuntosAnexos = datos.anexosAdjuntos;
        $(sltEspecimes).val(datos.especimenes).trigger('change');
        if(datos.tipoSolicitud == 10200 || datos.tipoSolicitud == 20206){
            await cargarNumeraciones(datos.numeraciones);
            ocultarElemento(divNumeraciones, false);
        } else if(datos.tipoSolicitud == 20207){
            await llenarTablaseleccionada(datos.cuttingSave,datos.safeGuardNumbers);
            ocultarElemento(divTipoActa, false);
            ocultarElemento(divtableTipoActa, true);
            ocultarElemento(divTableSelected, false);
        }
        if (adjuntosAnexos != null && adjuntosAnexos != undefined && adjuntosAnexos.length > 0) {
            adjuntosAnexosOriginal.push(...adjuntosAnexos);
            adjuntosAnexos.forEach(el => {
                adjuntoHTML(contenedorAnexos, el.adjuntoBase64, el.tipoAdjunto, el.nombreAdjunto, null, el.codigo, !enRequerimiento);
            });
        }
        if(enRequerimiento || ((radicadas || aprobadas) && datos.respuesta!='' && datos.respuesta!=null)){
            adjuntosRespuesta = datos.adjuntosRespuesta;
            if (adjuntosRespuesta != null && adjuntosRespuesta != undefined && adjuntosRespuesta.length > 0) {
                adjuntosRespuestaOriginal.push(...adjuntosRespuesta);
                adjuntosRespuesta.forEach(el => {
                    adjuntoHTML(contenedorSoporteRespuesta, el.adjuntoBase64, el.tipoAdjunto, el.nombreAdjunto, null, el.codigo, !enRequerimiento);
                });
            }
            $(txtObservaciones).val(datos.observaciones);
        }
        if (enRequerimiento || ((radicadas || aprobadas) && datos.respuesta!='' && datos.respuesta!=null)) {
            if(enRequerimiento){
                ocultarElemento(divBtnEditarSolicitud, false);
            }
            ocultarElemento(divRespuesta, false);
            $(txtRespuesta).val(datos.respuesta);
        }
        if(aprobadas){
            if(datos.respuesta=='' || datos.respuesta==null){
                ocultarElemento(divTxtRespuesta, true);
                ocultarElemento(divDocSoporte, true);
            }
            ocultarElemento(divRespuesta, false);
            adjuntoCarta=datos.adjuntoCarta;
            if(adjuntoCarta!=null && adjuntoCarta != undefined){
                divCarta.innerHTML=`<iframe src="${adjuntoCarta.adjuntoBase64}" style="min-height:700px; width:100%;"></iframe>`;
            }
        }
        if(desistidas){
            adjuntosRespuesta = datos.adjuntosRespuesta;
            if (adjuntosRespuesta != null && adjuntosRespuesta != undefined && adjuntosRespuesta.length > 0) {
                adjuntosRespuesta.forEach(el => {
                    adjuntoHTML(contenedorDocSoporteDesistimiento, el.adjuntoBase64, el.tipoAdjunto, el.nombreAdjunto, null, el.codigo, desistidas);
                });
            }
            $(txtObservaciones).val(datos.observaciones);
            $(txtObservacionesDesistimiento).val(datos.observacionesDesistimiento);
            $(txtEstado).val(datos.estadoSolicitud);
            $(txtFechaRadicadoDesistimiento).val(moment(datos.fechaCambioEstado).format('yyyy-MM-DD'));
            ocultarElemento(divRespuesta, false);
            if(datos.respuesta=='' || datos.respuesta==null){
                ocultarElemento(divTxtRespuesta, true);
                ocultarElemento(divDocSoporte, true);
            }
            ocultarElemento(divDocAnexos, true);
            ocultarElemento(divDocFactura, true);
        }
        if(aprobadas || desistidas){
            ocultarElemento(ulMenu, false);
            ocultarNavs(true);
        }
    }

    $('#chkNumeraciones').on('change', async function(){
        datosNumeraciones=[];
        await cargarTablasCuposInventario();
    });

    $('#tableRadicadas tbody').on('click', '.btnVerRadicada', async function () {
        limpiarRadicarSolicitud();
        idSolicitud = $(this).parents("tr").find("td")[0].innerText;
        ocultarElemento(`#spinner${idSolicitud}`, false);
        radicadas = true;
        enRequerimiento = false;
        aprobadas=false;
        desistidas=false;
        soloLeerControles();
        await llenarControlesSolicitudRadicada();
        loadTabs(1);
        ocultarElemento(`#spinner${idSolicitud}`, true);
    });

    $('#tableRequeriemiento tbody').on('click', '.btnEditarRequerimiento', async function () {
        limpiarRadicarSolicitud();
        idSolicitud = $(this).parents("tr").find("td")[0].innerText;
        ocultarElemento(`#spinner${idSolicitud}`, false);
        radicadas = false;
        enRequerimiento = true;
        aprobadas=false;
        desistidas=false;
        soloLeerControles()
        await llenarControlesSolicitudRadicada();
        loadTabs(1);
        ocultarElemento(`#spinner${idSolicitud}`, true);
    });

    $('#tableAprobadas tbody').on('click', '.btnVerAprobadas', async function () {
        limpiarRadicarSolicitud();
        idSolicitud = $(this).parents("tr").find("td")[0].innerText;
        ocultarElemento(`#spinner${idSolicitud}`, false);
        radicadas = false;
        enRequerimiento = false;
        aprobadas=true;
        desistidas=false;
        soloLeerControles();
        await llenarControlesSolicitudRadicada();
        loadTabs(1);
        ocultarElemento(`#spinner${idSolicitud}`, true);
        ajustarColumnasTabla('tableNumeraciones');
    });

    $('#tableDesistimiento tbody').on('click', '.btnVerDesistimiento', async function () {
        limpiarRadicarSolicitud();
        idSolicitud = $(this).parents("tr").find("td")[0].innerText;
        ocultarElemento(`#spinner${idSolicitud}`, false);
        radicadas = false;
        enRequerimiento = false;
        aprobadas=false;
        desistidas=true;
        soloLeerControles();
        await llenarControlesSolicitudRadicada();
        loadTabs(1);
        ocultarElemento(`#spinner${idSolicitud}`, true);
    });

    $('#fileFactura').on('change', async function () {
        ocultarElemento(spanFileFactura, true);
        contenedorFactura.innerHTML = "";
        facturaBase64 = '';
        nombreFactura = '';
        tipoAdjuntoFactura = '';
        var dato_archivo = $('#fileFactura').prop("files")[0];
        var extencionesPermitidas = ["application/pdf"];
        var strExtenciones = ".pdf";
        var adjunto = await mostrarAdjunto(dato_archivo, contenedorFactura, spanFileFactura, extencionesPermitidas, strExtenciones, fileContenedorFactura);
        codigoAdjuntoFactura = 0;
        facturaBase64 = adjunto.adjuntoBase64;
        nombreFactura = adjunto.nombreAdjunto;
        tipoAdjuntoFactura = adjunto.tipoAdjunto;
        $(fileFactura).val('');
    });

    $('#fileSoporteRespuesta').on('change', async function () {
        ocultarElemento(spanFileAnexos, true);
        var dato_archivo = $('#fileSoporteRespuesta').prop("files")[0];
        var extencionesPermitidas = ["application/pdf"];
        var strExtenciones = ".pdf";
        await mostrarAdjunto(dato_archivo, contenedorSoporteRespuesta, spanFileSoporteRespuesta, extencionesPermitidas, strExtenciones, null, adjuntosRespuesta, true, adjuntosRespuestaNuevos, adjuntosRespuestaOriginal);
        $(fileSoporteRespuesta).val('');
    });

    $('#fileAnexos').on('change', async function () {
        ocultarElemento(spanFileAnexos, true);
        var dato_archivo = $('#fileAnexos').prop("files")[0];
        var extencionesPermitidas = ["application/pdf"];
        var strExtenciones = ".pdf";
        if (enRequerimiento) {
            await mostrarAdjunto(dato_archivo, contenedorAnexos, spanFileAnexos, extencionesPermitidas, strExtenciones, null, adjuntosAnexos, true, adjuntosAnexosNuevos, adjuntosAnexosOriginal);
        } else {
            await mostrarAdjunto(dato_archivo, contenedorAnexos, spanFileAnexos, extencionesPermitidas, strExtenciones, null, adjuntosAnexos);
        }
        $(fileAnexos).val('');
    });

    $(contenedorAnexos).on('click', '.btnPrevisualizar', function (e) {
        var cadena = e.target.parentElement.firstElementChild.id;
        var id = cadena.replace(/btnPrevisualizar/i, "");
        var adjunto = adjuntosAnexos.find(p => p.codigo == parseInt(id));
        var newWindow = window.open();
        newWindow.document.write('<iframe src=' + adjunto.adjuntoBase64 + ' style="height:100%; width:100%;"></iframe>');
    });

    $(contenedorAnexos).on('click', '.btnEliminarAdjunto', function (e) {
        var cadena = e.target.parentElement.id;
        var id = cadena.replace(/btnEliminarAdjunto/i, "");
        var adjunto = adjuntosAnexos.find(p => p.codigo == parseInt(id));
        adjuntosAnexos = adjuntosAnexos.filter(p => p.codigo != adjunto.codigo);
        if (enRequerimiento) {
            adjuntosAnexosNuevos = adjuntosAnexosNuevos.filter(p => p.codigo != adjunto.codigo)
            var validar = adjuntosAnexosOriginal.find(p => p.codigo == parseInt(id));
            if (validar != null && validar != undefined) {
                adjuntosAnexosEliminar.push(validar);
            }
        }
        var hijo = document.getElementById(`divAdjunto${adjunto.codigo}`);
        contenedorAnexos.removeChild(hijo);
    });

    $(contenedorSoporteRespuesta).on('click', '.btnPrevisualizar', function (e) {
        var cadena = e.target.parentElement.firstElementChild.id;
        var id = cadena.replace(/btnPrevisualizar/i, "");
        var adjunto = adjuntosRespuesta.find(p => p.codigo == parseInt(id));
        var newWindow = window.open();
        newWindow.document.write('<iframe src=' + adjunto.adjuntoBase64 + ' style="height:100%; width:100%;"></iframe>');
    });

    $(contenedorSoporteRespuesta).on('click', '.btnEliminarAdjunto', function (e) {
        var cadena = e.target.parentElement.id;
        var id = cadena.replace(/btnEliminarAdjunto/i, "");
        var adjunto = adjuntosRespuesta.find(p => p.codigo == parseInt(id));
        adjuntosRespuesta = adjuntosRespuesta.filter(p => p.codigo != adjunto.codigo);
        if (enRequerimiento) {
            adjuntosRespuestaNuevos = adjuntosRespuestaNuevos.filter(p => p.codigo != adjunto.codigo)
            var validar = adjuntosRespuestaOriginal.find(p => p.codigo == parseInt(id));
            if (validar != null && validar != undefined) {
                adjuntosRespuestaEliminar.push(validar);
            }
        }
        var hijo = document.getElementById(`divAdjunto${adjunto.codigo}`);
        contenedorSoporteRespuesta.removeChild(hijo);
    });

    $(contenedorDocSoporteDesistimiento).on('click', '.btnPrevisualizar', function (e) {
        var cadena = e.target.parentElement.firstElementChild.id;
        var id = cadena.replace(/btnPrevisualizar/i, "");
        var adjunto = adjuntosRespuesta.find(p => p.codigo == parseInt(id));
        var newWindow = window.open();
        newWindow.document.write('<iframe src=' + adjunto.adjuntoBase64 + ' style="height:100%; width:100%;"></iframe>');
    });

    $(sltCiudad).on('change', function () {
        reiniciarElementos($('#divSltCiudad .select2-selection'), validacionsltCiudad);
    });

    $(txtEstablecimiento).on('change', function () {
        reiniciarElementos(txtEstablecimiento, validaciontxtEstablecimiento);
    });

    $(txtPrimerNombre).on('change', function () {
        reiniciarElementos(txtPrimerNombre, validaciontxtPrimerNombre);
    });

    $(txtPrimerApellido).on('change', function () {
        reiniciarElementos(txtPrimerApellido, validaciontxtPrimerApellido);
    });

    $(txtSegundoApellido).on('change', function () {
        reiniciarElementos(txtSegundoApellido, validaciontxtSegundoApellido);
    });

    $(sltTipoIdentificacion).on('change', function () {
        reiniciarElementos(sltTipoIdentificacion, validacionsltTipoIdentificacion);
    });

    $(txtNumeroIdentifiacion).on('change', function () {
        reiniciarElementos(txtNumeroIdentifiacion, validaciontxtNumeroIdentifiacion);
    });

    $(txtDireccionEntrega).on('change', function () {
        reiniciarElementos(txtDireccionEntrega, validaciontxtDireccionEntrega);
    });

    $(sltCiudadRepresentante).on('change', function () {
        reiniciarElementos($('#divSltCiudadRepresentante .select2-selection'), validacionsltCiudadRepresentante);
    });

    $(txtTelefono).on('change', function () {
        reiniciarElementos(txtTelefono, validaciontxtTelefono);
    });

    $(sltEspecimes).on('change', function () {
        reiniciarElementos(sltEspecimes, validacionsltEspecimes);
    });

    $(txtLongitudMenor).on('change', function () {
        reiniciarElementos(txtLongitudMenor, validaciontxtLongitudMenor);
    });

    $(txtLongitudMayor).on('change', function () {
        reiniciarElementos(txtLongitudMayor, validaciontxtLongitudMayor);
    });

    $(txtFechaRepresentante).on('change', function () {
        reiniciarElementos(txtFechaRepresentante, validaciontxtFechaRepresentante);
    });

    function limpiarVistasTiposSolicitud(){
        ocultarElemento(divTipoActa, true);
        ocultarElemento(divBuscarEspecie, true);
        ocultarElemento(divBtnBuscarCupo, false);
        ocultarElemento(divCuposSeleccionar, true);
        ocultarElemento(divCortes, true);
        readOnly(txtCantidad, true);

        ocultarElemento(divTableSelected, true);
        safeGuardNumbersSave =[];
        cortesGuardar = [];
        $(txtCantidad).val(0);
        volverBuscarCupo();
    }

    $(sltTipoSolicitud).on('change', async function () {
        reiniciarElementos(sltTipoSolicitud, validacionsltTipoSolicitud);
        if($(sltTipoSolicitud).val() == 10200 || $(sltTipoSolicitud).val() == 20206){
            limpiarVistasTiposSolicitud();
            ocultarElemento(divBuscarEspecie, false);
            reiniciarAlertasControles();
            return;
        } else if($(sltTipoSolicitud).val() == 20207){  
            limpiarVistasTiposSolicitud();
            ocultarElemento(divBuscarEspecie, false);
            ocultarElemento(divBtnBuscarCupo, true);
            ocultarElemento(divTipoActa, false);
            reiniciarAlertasControles();
            await tipoCortes();
            return;
        }
        limpiarVistasTiposSolicitud();
        ocultarElemento(divBuscarEspecie, false);
        ocultarElemento(divBtnBuscarCupo, true);
        reiniciarAlertasControles();
        readOnly(txtCantidad, false);
        
    });

    $('#tableTipoActa tbody').on('click', '.btnAgregarActa', async function () {
        cuttingId = parseInt($(this).parents("tr").find("td")[0].innerText);
        await loadTableFractions();
        ocultarElemento(divContenidoRadicar, true);
        ocultarElemento(divCuposSeleccionar, true);
        ocultarElemento(divCortes, false);
    });
    
    $('#tableTipoActa tbody').on('click', '.btnEditarActa', async function () {
        
        cuttingId = parseInt($(this).parents("tr").find("td")[0].innerText);
        await loadTableFractions();
        var cuttingFound = cortesGuardar.filter(p=>p.idCutting == cuttingId);
        cuttingFound.forEach(el=>{
            $(`#chk${el.id}`).prop('checked', true);
            $(`#cant${el.id}`).val(el.amountSelected);
            $(`#area${el.id}`).val(el.totalAreaSelected);
            cortes.push(el);
            cortesCopia.push(el);
            cortesGuardar = cortesGuardar.filter(p=>p.id!=el.id);
        });
        var safeGuardsFound = safeGuardNumbersSave.filter(p=>p.idCutting == cuttingId);
        safeGuardsFound.forEach(el=>{
            if($(`#${el.id}`).hasClass('boxSafeguard')){
                $(`#${el.id}`).removeClass('boxSafeguard');
                $(`#${el.id}`).addClass('boxSafeguard-active');
            }
            safeGuardNumbers.push(el);
            safeGuardNumbersCopy.push(el);
            safeGuardNumbersSave = safeGuardNumbersSave.filter(p=>p.id!=el.id);
        });
        ocultarElemento(divContenidoRadicar, true);
        ocultarElemento(divCuposSeleccionar, true);
        ocultarElemento(divCortes, false);
    });
    
    $('#tableCortes tbody').on('click', '.chkAdd', async function () {
        var cuttingTypeId = parseInt($(this).parents("tr").find("td")[0].innerText);
        var fractionType = $(this).parents("tr").find("td")[1].innerText;
        var amount =  parseInt($(this).parents("tr").find("td")[2].innerText);
        var totalArea =  parseInt($(this).parents("tr").find("td")[3].innerText);
        var amountSelected =  parseInt($(this).parents("tr").find("td")[4].children[0].value == '' ? 0 : $(this).parents("tr").find("td")[4].children[0].value);
        var totalAreaSelected =  parseInt($(this).parents("tr").find("td")[5].children[0].value == '' ? 0 : $(this).parents("tr").find("td")[5].children[0].value);
        if($(this).prop('checked')){
            if(validacionSeleccionFracciones(amountSelected, totalAreaSelected, amount, totalArea, this)){
                cortes.push({
                    'id': cuttingTypeId,
                    'idCutting': cuttingId,
                    'fractionType': fractionType,
                    'amountSelected': amountSelected,
                    'totalAreaSelected': totalAreaSelected
                });
            }
            return;
        }
        cortes = cortes.filter(p=>p.id != cuttingTypeId);
    });

    function volverCortes(){
        if(cortesCopia !=null && cortesCopia != undefined && cortesCopia.length>0){
            cortesCopia.forEach(el=>{
                cortesGuardar.push(el);
            });
        }
        if(safeGuardNumbersCopy !=null && safeGuardNumbersCopy != undefined && safeGuardNumbersCopy.length>0){
            safeGuardNumbersCopy.forEach(el=>{
                safeGuardNumbersSave.push(el);
            });
        }

        if(cortesGuardar !=null && cortesGuardar != undefined && cortesGuardar.length>0 && safeGuardNumbersSave !=null && safeGuardNumbersSave != undefined && safeGuardNumbersSave.length>0){
            ocultarElemento(divTableSelected, false);
        }else{
            ocultarElemento(divTableSelected, true);
        }

        safeGuardNumbers=[];
        safeGuardNumbersCopy=[];
        cortes=[];
        cortesCopia=[];
        ocultarElemento(divCuposSeleccionar, true);
        ocultarElemento(divCortes, true);
        ocultarElemento(divContenidoRadicar, false);
    }

    async function guardarCortes(){
        if(validarChecks() && cortes !=null && cortes != undefined && cortes.length>0 && safeGuardNumbers !=null && safeGuardNumbers != undefined && safeGuardNumbers.length>0 ){
            cortes.forEach(el=>{
                cortesGuardar.push(el);
            });
            safeGuardNumbers.forEach(el=>{
                safeGuardNumbersSave.push(el);
            });
            cortes=[];
            cortesCopia=[];
            safeGuardNumbers=[];
            safeGuardNumbersCopy=[];
            await tipoCortes();
            await llenarTablaseleccionada(cortesGuardar,safeGuardNumbersSave);
            ocultarElemento(divTableSelected, false);
            ocultarElemento(divCuposSeleccionar, true);
            ocultarElemento(divCortes, true);
            ocultarElemento(divContenidoRadicar, false);
            let cantidadTotal =0
            cortesGuardar.forEach(el=>{
                cantidadTotal = cantidadTotal + el.amountSelected;
            })
            $(txtCantidad).val(cantidadTotal);
            return;
        }
        textAlertaNumeraciones.innerText='Debe seleccionar al menos un registro y un numero de salvoconducto';
        $('#modalAlertaNumeraciones').modal('show');
    }

    function validarChecks(){
        var chks = $('.chkAdd');
        for(var i =0; i<chks.length ; i++ ){
            if(chks[i].checked){
                return true;
            }
        }
        return false;
    }

    function validacionSeleccionFracciones(amountSelected, totalAreaSelected, amount, totalArea, chkSelect){
        if(amountSelected>amount){
            textAlertaNumeraciones.innerText='La cantidad seleccionada no puede ser mayor a la disponible';
            $('#modalAlertaNumeraciones').modal('show');
            $(chkSelect).prop('checked', false);
            return false;
        }
        if(totalAreaSelected>totalArea){
            textAlertaNumeraciones.innerText='El area seleccionada no puede ser mayor a la disponible';
            $('#modalAlertaNumeraciones').modal('show');
            $(chkSelect).prop('checked', false);
            return false;
        }
        if(amountSelected == 0 || amountSelected =='' || totalAreaSelected == 0 || totalAreaSelected == ''){
            textAlertaNumeraciones.innerText='Los campos seleccion de cantidad y area no deben estar vacios';
            $('#modalAlertaNumeraciones').modal('show');
            $(chkSelect).prop('checked', false);
            return false;
        }
    return true;
}

    async function tipoCortes(){
        let url = '@Url.Action("getActaData", "TrayForNationalSealsExternUsers")?documentNumber='+ nitEmpresa;
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        columns=[
            {
                "data": "code", 
                "className": "d-none"
            },
            {
                render: function(){
                    return 'Acta de control Corte de pieles fracciones irregulares';
                }
            },
            {
                "data": "dateRegister", 
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                "data": "dateVisit",
                render: function (data) {
                    if (data != null) {
                        return moment(data).format("yyyy-MM-DD");
                    }
                    return data;
                }
            },
            {
                "data": "visitNumber"
            },
            {
                "data": "code", 
                render: function(data){
                    var validar = cortesGuardar.filter(p=>p.idCutting==parseInt(data));
                    if(validar!=null && validar!=undefined && validar.length>0){
                        return "<a class='btnEditarActa' type='Button'>EDITAR</a>";
                    }
                    return "<a class='btnAgregarActa' type='Button'>AGREGAR</a>";
                }
            },
        ];
        DataTableGenericoSinBuscador('#tableTipoActa', columns, datos, 2);
    }

    async function loadTableFractions(){
        let url = '@Url.Action("getFractions", "TrayForNationalSealsExternUsers")?cuttingCode='+ parseInt(cuttingId);
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }
        columns=[
            {
                "data": "code", 
                "className": "d-none"
            },
            {
                "data": "fractionsType"
            },
            {
                "data": "amount"
            },
            {
                "data": "totalArea"
            },
            {
                "data": "code", 
                render: function(data){
                    return `<input class="form-control cantSel" type="number" id="cant${data}" placeholder="Cantidad">`
                }
            },
            {
                "data": "code", 
                render: function(data){
                    return `<input class="form-control areaSel" type="number" id="area${data}" placeholder="Area">`
                }
            },
            {   
                "data": "code",
                render: function(data){
                    return `<div class="form-check form-switch">
                            <input class="form-check-input chkAdd" type="checkbox" id="chk${data}">
                            <label class="form-check-label" for="flexSwitchCheckChecked"></label>
                        </div>`
                }
            }
        ];
        DataTableGenericoSinBuscador('#tableCortes', columns, datos, 2);

        await loadTableSaveguard();
        
        $(".cantSel").on('change', function(e){
         var idCheckCantidad = e.target.id;
         var numberId = idCheckCantidad.replace('cant', '');
         cortes = cortes.filter(p=>p.id != parseInt(numberId));
         $(`#chk${numberId}`).prop('checked', false);
        });

        $(".areaSel").on('change', function(e){
         var idCheckArea = e.target.id;
         var numberId = idCheckArea.replace('area', '');
          cortes = cortes.filter(p=>p.id != parseInt(numberId));
         $(`#chk${numberId}`).prop('checked', false);
        });

    }

    async function loadTableSaveguard(){
        let url = '@Url.Action("getSafeguard", "TrayForNationalSealsExternUsers")?reportCode='+ parseInt(cuttingId);
        let datos = await Get(url);
        if (datos.volverInicio != undefined) {
            cerrarSesionCaducada();
            return;
        }

        tableSafeguard.innerHTML = '';

        datos.forEach(el =>{
            tableSafeguard.innerHTML += `<div class="boxSafeguard col-3 safeGuard" type="button" id="${el.code}">${el.codSafeguard}</div>`;
        })

        $(".safeGuard").on('click', function(e){
            var idSafe = e.target.id;
            if($(`#${idSafe}`).hasClass('boxSafeguard')){
                $(`#${idSafe}`).removeClass('boxSafeguard');
                $(`#${idSafe}`).addClass('boxSafeguard-active');
                safeGuardNumbers.push({
                    'id': parseInt(idSafe),
                    'idCutting':cuttingId,
                    'number': $(`#${idSafe}`)[0].innerHTML
                });
            }else{
                safeGuardNumbers = safeGuardNumbers.filter(p=>p.id!=parseInt(idSafe));
                $(`#${idSafe}`).removeClass('boxSafeguard-active');
                $(`#${idSafe}`).addClass('boxSafeguard');
            }
        });
    }

    function llenarTablaseleccionada(cortesGuardar,safeGuardNumbersSave){
        columns=[
            {
                "data": "fractionType"
            },
            {
                "data": "amountSelected"
            },
            {
                "data": "totalAreaSelected"
            }
        ];
        DataTableGenericoSinBuscador('#tableFractionsSelected', columns, cortesGuardar, 2);

        tableSafeguardSelected.innerHTML='';
        safeGuardNumbersSave.forEach(el =>{
            tableSafeguardSelected.innerHTML += `<div class="boxSafeguard-active col-3" type="button">${el.number}</div>`;
        })
    }

    @* adjunto arrastrados factura *@

    fileContenedorFactura.addEventListener('dragover', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileFactura, true);
        $(fileContenedorFactura).addClass('activeFile');
    });

    fileContenedorFactura.addEventListener('dragleave', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileFactura, true);
        $(fileContenedorFactura).removeClass('activeFile');
    });

    fileContenedorFactura.addEventListener('drop', async function (e) {
        e.preventDefault();
        contenedorFactura.innerHTML = "";
        ocultarElemento(spanFileFactura, true);
        $(fileContenedorFactura).removeClass('activeFile');
        var files = e.dataTransfer.files;
        if (files.length > 1) {
            spanFileFactura.innerText = 'Solo se admite un adjunto.';
            ocultarElemento(spanFileFactura, false);
            return
        }
        var extencionesPermitidas = ["application/pdf"];
        var strExtenciones = ".pdf";
        var adjunto = await mostrarAdjunto(files[0], contenedorFactura, spanFileFactura, extencionesPermitidas, strExtenciones, fileContenedorFactura);
        codigoAdjuntoFactura=0;
        facturaBase64 = adjunto.adjuntoBase64;
        nombreFactura = adjunto.nombreAdjunto;
        tipoAdjuntoFactura = adjunto.tipoAdjunto;
        $(fileFactura).val('');
    });

    @* arrastrado de adjuntos multiple anexos*@

    fileContenedorAnexos.addEventListener('dragover', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileAnexos, true);
        $(fileContenedorAnexos).addClass('activeFile');
    });

    fileContenedorAnexos.addEventListener('dragleave', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileAnexos, true);
        $(fileContenedorAnexos).removeClass('activeFile');
    });

    fileContenedorAnexos.addEventListener('drop', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileAnexos, true);
        $(fileContenedorAnexos).removeClass('activeFile');
        var files = e.dataTransfer.files;
        var extencionesPermitidas = ["application/pdf"];
        var strExtenciones = ".pdf";
        for (const file of files) {
            if (enRequerimiento) {
                mostrarAdjunto(file, contenedorAnexos, spanFileAnexos, extencionesPermitidas, strExtenciones, null, adjuntosAnexos, true, adjuntosAnexosNuevos, adjuntosAnexosOriginal);
            } else {
                mostrarAdjunto(file, contenedorAnexos, spanFileAnexos, extencionesPermitidas, strExtenciones, null, adjuntosAnexos);
            }
        };
        $(fileAnexos).val('');
    });

    @* arrastrado de adjuntos soporte *@

    fileContenedorSoporteRespuesta.addEventListener('dragover', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileSoporteRespuesta, true);
        $(fileContenedorSoporteRespuesta).addClass('activeFile');
    });

    fileContenedorSoporteRespuesta.addEventListener('dragleave', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileSoporteRespuesta, true);
        $(fileContenedorSoporteRespuesta).removeClass('activeFile');
    });

    fileContenedorSoporteRespuesta.addEventListener('drop', (e) => {
        e.preventDefault();
        ocultarElemento(spanFileSoporteRespuesta, true);
        $(fileContenedorSoporteRespuesta).removeClass('activeFile');
        var files = e.dataTransfer.files;
        var extencionesPermitidas = ["application/pdf"];
        var strExtenciones = ".pdf";
        for (const file of files) {
            mostrarAdjunto(file, contenedorSoporteRespuesta, spanFileSoporteRespuesta, extencionesPermitidas, strExtenciones, null, adjuntosRespuesta, true, adjuntosRespuestaNuevos, adjuntosRespuestaOriginal);
        };
        $(fileSoporteRespuesta).val('');
    });

   $('#sltDepartamentoRepresentante').change(async function () {
    if(validarCiudad){
        const valorSeleccionado = $(this).val();
        let url = '@Url.Action("ConsultCitiesByDepartmentId", "TrayForNationalSealsExternUsers")?departamentoId='+ valorSeleccionado;   
        $('#sltCiudadRepresentante').html('');
        traerCiudades(sltCiudadRepresentante, url);
    }
    validarCiudad=true;

    });




</script>